// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flopointpb.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "flopointpb.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace flopointpb {

namespace {

const ::google::protobuf::Descriptor* FloPointMultiMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FloPointMultiMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* FloPointMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FloPointMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* FloPointMessage_Waveform_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FloPointMessage_Waveform_reflection_ = NULL;
const ::google::protobuf::Descriptor* FloPointMessage_Jitter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FloPointMessage_Jitter_reflection_ = NULL;
const ::google::protobuf::Descriptor* FloPointMessage_Time_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FloPointMessage_Time_reflection_ = NULL;
const ::google::protobuf::Descriptor* FloPointMessage_Temp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FloPointMessage_Temp_reflection_ = NULL;
const ::google::protobuf::Descriptor* FloPointMessage_Volt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FloPointMessage_Volt_reflection_ = NULL;
const ::google::protobuf::Descriptor* FloPointMessage_CompileInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FloPointMessage_CompileInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* FloPointMessage_Count_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FloPointMessage_Count_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* FloPointMessage_TimeSource_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FloPointMessage_TempSource_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FloPointMessage_VoltSource_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FloPointMessage_CountType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_flopointpb_2eproto() {
  protobuf_AddDesc_flopointpb_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "flopointpb.proto");
  GOOGLE_CHECK(file != NULL);
  FloPointMultiMessage_descriptor_ = file->message_type(0);
  static const int FloPointMultiMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloPointMultiMessage, messages_),
  };
  FloPointMultiMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FloPointMultiMessage_descriptor_,
      FloPointMultiMessage::default_instance_,
      FloPointMultiMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloPointMultiMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloPointMultiMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FloPointMultiMessage));
  FloPointMessage_descriptor_ = file->message_type(1);
  static const int FloPointMessage_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloPointMessage, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloPointMessage, waveform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloPointMessage, jitter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloPointMessage, time_reading_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloPointMessage, temp_reading_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloPointMessage, volt_reading_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloPointMessage, compile_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloPointMessage, dipswitches_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloPointMessage, count_),
  };
  FloPointMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FloPointMessage_descriptor_,
      FloPointMessage::default_instance_,
      FloPointMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloPointMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloPointMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FloPointMessage));
  FloPointMessage_Waveform_descriptor_ = FloPointMessage_descriptor_->nested_type(0);
  static const int FloPointMessage_Waveform_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloPointMessage_Waveform, wheight_),
  };
  FloPointMessage_Waveform_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FloPointMessage_Waveform_descriptor_,
      FloPointMessage_Waveform::default_instance_,
      FloPointMessage_Waveform_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloPointMessage_Waveform, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloPointMessage_Waveform, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FloPointMessage_Waveform));
  FloPointMessage_Jitter_descriptor_ = FloPointMessage_descriptor_->nested_type(1);
  static const int FloPointMessage_Jitter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloPointMessage_Jitter, jheight_),
  };
  FloPointMessage_Jitter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FloPointMessage_Jitter_descriptor_,
      FloPointMessage_Jitter::default_instance_,
      FloPointMessage_Jitter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloPointMessage_Jitter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloPointMessage_Jitter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FloPointMessage_Jitter));
  FloPointMessage_Time_descriptor_ = FloPointMessage_descriptor_->nested_type(2);
  static const int FloPointMessage_Time_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloPointMessage_Time, time_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloPointMessage_Time, time_source_),
  };
  FloPointMessage_Time_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FloPointMessage_Time_descriptor_,
      FloPointMessage_Time::default_instance_,
      FloPointMessage_Time_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloPointMessage_Time, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloPointMessage_Time, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FloPointMessage_Time));
  FloPointMessage_Temp_descriptor_ = FloPointMessage_descriptor_->nested_type(3);
  static const int FloPointMessage_Temp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloPointMessage_Temp, temp_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloPointMessage_Temp, temp_source_),
  };
  FloPointMessage_Temp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FloPointMessage_Temp_descriptor_,
      FloPointMessage_Temp::default_instance_,
      FloPointMessage_Temp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloPointMessage_Temp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloPointMessage_Temp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FloPointMessage_Temp));
  FloPointMessage_Volt_descriptor_ = FloPointMessage_descriptor_->nested_type(4);
  static const int FloPointMessage_Volt_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloPointMessage_Volt, volt_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloPointMessage_Volt, volt_source_),
  };
  FloPointMessage_Volt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FloPointMessage_Volt_descriptor_,
      FloPointMessage_Volt::default_instance_,
      FloPointMessage_Volt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloPointMessage_Volt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloPointMessage_Volt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FloPointMessage_Volt));
  FloPointMessage_CompileInfo_descriptor_ = FloPointMessage_descriptor_->nested_type(5);
  static const int FloPointMessage_CompileInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloPointMessage_CompileInfo, compiler_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloPointMessage_CompileInfo, date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloPointMessage_CompileInfo, operating_system_),
  };
  FloPointMessage_CompileInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FloPointMessage_CompileInfo_descriptor_,
      FloPointMessage_CompileInfo::default_instance_,
      FloPointMessage_CompileInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloPointMessage_CompileInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloPointMessage_CompileInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FloPointMessage_CompileInfo));
  FloPointMessage_Count_descriptor_ = FloPointMessage_descriptor_->nested_type(6);
  static const int FloPointMessage_Count_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloPointMessage_Count, count_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloPointMessage_Count, count_type_),
  };
  FloPointMessage_Count_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FloPointMessage_Count_descriptor_,
      FloPointMessage_Count::default_instance_,
      FloPointMessage_Count_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloPointMessage_Count, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloPointMessage_Count, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FloPointMessage_Count));
  FloPointMessage_TimeSource_descriptor_ = FloPointMessage_descriptor_->enum_type(0);
  FloPointMessage_TempSource_descriptor_ = FloPointMessage_descriptor_->enum_type(1);
  FloPointMessage_VoltSource_descriptor_ = FloPointMessage_descriptor_->enum_type(2);
  FloPointMessage_CountType_descriptor_ = FloPointMessage_descriptor_->enum_type(3);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_flopointpb_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FloPointMultiMessage_descriptor_, &FloPointMultiMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FloPointMessage_descriptor_, &FloPointMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FloPointMessage_Waveform_descriptor_, &FloPointMessage_Waveform::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FloPointMessage_Jitter_descriptor_, &FloPointMessage_Jitter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FloPointMessage_Time_descriptor_, &FloPointMessage_Time::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FloPointMessage_Temp_descriptor_, &FloPointMessage_Temp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FloPointMessage_Volt_descriptor_, &FloPointMessage_Volt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FloPointMessage_CompileInfo_descriptor_, &FloPointMessage_CompileInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FloPointMessage_Count_descriptor_, &FloPointMessage_Count::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_flopointpb_2eproto() {
  delete FloPointMultiMessage::default_instance_;
  delete FloPointMultiMessage_reflection_;
  delete FloPointMessage::default_instance_;
  delete FloPointMessage_reflection_;
  delete FloPointMessage_Waveform::default_instance_;
  delete FloPointMessage_Waveform_reflection_;
  delete FloPointMessage_Jitter::default_instance_;
  delete FloPointMessage_Jitter_reflection_;
  delete FloPointMessage_Time::default_instance_;
  delete FloPointMessage_Time_reflection_;
  delete FloPointMessage_Temp::default_instance_;
  delete FloPointMessage_Temp_reflection_;
  delete FloPointMessage_Volt::default_instance_;
  delete FloPointMessage_Volt_reflection_;
  delete FloPointMessage_CompileInfo::default_instance_;
  delete FloPointMessage_CompileInfo_reflection_;
  delete FloPointMessage_Count::default_instance_;
  delete FloPointMessage_Count_reflection_;
}

void protobuf_AddDesc_flopointpb_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020flopointpb.proto\022\nflopointpb\"E\n\024FloPoi"
    "ntMultiMessage\022-\n\010messages\030\001 \003(\0132\033.flopo"
    "intpb.FloPointMessage\"\202\t\n\017FloPointMessag"
    "e\022\014\n\004name\030\001 \002(\t\0226\n\010waveform\030\002 \002(\0132$.flop"
    "ointpb.FloPointMessage.Waveform\0222\n\006jitte"
    "r\030\003 \001(\0132\".flopointpb.FloPointMessage.Jit"
    "ter\0226\n\014time_reading\030\004 \003(\0132 .flopointpb.F"
    "loPointMessage.Time\0226\n\014temp_reading\030\005 \003("
    "\0132 .flopointpb.FloPointMessage.Temp\0226\n\014v"
    "olt_reading\030\006 \003(\0132 .flopointpb.FloPointM"
    "essage.Volt\022=\n\014compile_info\030\007 \001(\0132\'.flop"
    "ointpb.FloPointMessage.CompileInfo\022\023\n\013di"
    "pswitches\030\010 \001(\005\0220\n\005count\030\t \003(\0132!.flopoin"
    "tpb.FloPointMessage.Count\032\037\n\010Waveform\022\023\n"
    "\007wheight\030\001 \003(\005B\002\020\001\032\035\n\006Jitter\022\023\n\007jheight\030"
    "\001 \003(\005B\002\020\001\032W\n\004Time\022\022\n\ntime_point\030\001 \002(\003\022;\n"
    "\013time_source\030\002 \002(\0162&.flopointpb.FloPoint"
    "Message.TimeSource\032W\n\004Temp\022\022\n\ntemp_point"
    "\030\001 \002(\005\022;\n\013temp_source\030\002 \002(\0162&.flopointpb"
    ".FloPointMessage.TempSource\032W\n\004Volt\022\022\n\nv"
    "olt_point\030\001 \002(\005\022;\n\013volt_source\030\002 \002(\0162&.f"
    "lopointpb.FloPointMessage.VoltSource\032G\n\013"
    "CompileInfo\022\020\n\010compiler\030\001 \002(\t\022\014\n\004date\030\002 "
    "\001(\t\022\030\n\020operating_system\030\003 \001(\t\032W\n\005Count\022\023"
    "\n\013count_value\030\001 \002(\005\0229\n\ncount_type\030\002 \002(\0162"
    "%.flopointpb.FloPointMessage.CountType\"0"
    "\n\nTimeSource\022\n\n\006CLOCK0\020\000\022\n\n\006CLOCK1\020\001\022\n\n\006"
    "CLOCK2\020\002\"0\n\nTempSource\022\n\n\006THERM0\020\000\022\n\n\006TH"
    "ERM1\020\001\022\n\n\006THERM2\020\002\"0\n\nVoltSource\022\n\n\006VOLT"
    "M0\020\000\022\n\n\006VOLTM1\020\001\022\n\n\006VOLTM2\020\002\"D\n\tCountTyp"
    "e\022\020\n\014MESSAGECOUNT\020\000\022\n\n\006UPTIME\020\001\022\r\n\tBOOTC"
    "YCLE\020\002\022\n\n\006COUNT3\020\003", 1258);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "flopointpb.proto", &protobuf_RegisterTypes);
  FloPointMultiMessage::default_instance_ = new FloPointMultiMessage();
  FloPointMessage::default_instance_ = new FloPointMessage();
  FloPointMessage_Waveform::default_instance_ = new FloPointMessage_Waveform();
  FloPointMessage_Jitter::default_instance_ = new FloPointMessage_Jitter();
  FloPointMessage_Time::default_instance_ = new FloPointMessage_Time();
  FloPointMessage_Temp::default_instance_ = new FloPointMessage_Temp();
  FloPointMessage_Volt::default_instance_ = new FloPointMessage_Volt();
  FloPointMessage_CompileInfo::default_instance_ = new FloPointMessage_CompileInfo();
  FloPointMessage_Count::default_instance_ = new FloPointMessage_Count();
  FloPointMultiMessage::default_instance_->InitAsDefaultInstance();
  FloPointMessage::default_instance_->InitAsDefaultInstance();
  FloPointMessage_Waveform::default_instance_->InitAsDefaultInstance();
  FloPointMessage_Jitter::default_instance_->InitAsDefaultInstance();
  FloPointMessage_Time::default_instance_->InitAsDefaultInstance();
  FloPointMessage_Temp::default_instance_->InitAsDefaultInstance();
  FloPointMessage_Volt::default_instance_->InitAsDefaultInstance();
  FloPointMessage_CompileInfo::default_instance_->InitAsDefaultInstance();
  FloPointMessage_Count::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_flopointpb_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_flopointpb_2eproto {
  StaticDescriptorInitializer_flopointpb_2eproto() {
    protobuf_AddDesc_flopointpb_2eproto();
  }
} static_descriptor_initializer_flopointpb_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int FloPointMultiMessage::kMessagesFieldNumber;
#endif  // !_MSC_VER

FloPointMultiMessage::FloPointMultiMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flopointpb.FloPointMultiMessage)
}

void FloPointMultiMessage::InitAsDefaultInstance() {
}

FloPointMultiMessage::FloPointMultiMessage(const FloPointMultiMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:flopointpb.FloPointMultiMessage)
}

void FloPointMultiMessage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FloPointMultiMessage::~FloPointMultiMessage() {
  // @@protoc_insertion_point(destructor:flopointpb.FloPointMultiMessage)
  SharedDtor();
}

void FloPointMultiMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FloPointMultiMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FloPointMultiMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FloPointMultiMessage_descriptor_;
}

const FloPointMultiMessage& FloPointMultiMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_flopointpb_2eproto();
  return *default_instance_;
}

FloPointMultiMessage* FloPointMultiMessage::default_instance_ = NULL;

FloPointMultiMessage* FloPointMultiMessage::New() const {
  return new FloPointMultiMessage;
}

void FloPointMultiMessage::Clear() {
  messages_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FloPointMultiMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flopointpb.FloPointMultiMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .flopointpb.FloPointMessage messages = 1;
      case 1: {
        if (tag == 10) {
         parse_messages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_messages()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_messages;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flopointpb.FloPointMultiMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flopointpb.FloPointMultiMessage)
  return false;
#undef DO_
}

void FloPointMultiMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flopointpb.FloPointMultiMessage)
  // repeated .flopointpb.FloPointMessage messages = 1;
  for (int i = 0; i < this->messages_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->messages(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flopointpb.FloPointMultiMessage)
}

::google::protobuf::uint8* FloPointMultiMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flopointpb.FloPointMultiMessage)
  // repeated .flopointpb.FloPointMessage messages = 1;
  for (int i = 0; i < this->messages_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->messages(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flopointpb.FloPointMultiMessage)
  return target;
}

int FloPointMultiMessage::ByteSize() const {
  int total_size = 0;

  // repeated .flopointpb.FloPointMessage messages = 1;
  total_size += 1 * this->messages_size();
  for (int i = 0; i < this->messages_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->messages(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FloPointMultiMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FloPointMultiMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FloPointMultiMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FloPointMultiMessage::MergeFrom(const FloPointMultiMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  messages_.MergeFrom(from.messages_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FloPointMultiMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FloPointMultiMessage::CopyFrom(const FloPointMultiMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FloPointMultiMessage::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->messages())) return false;
  return true;
}

void FloPointMultiMessage::Swap(FloPointMultiMessage* other) {
  if (other != this) {
    messages_.Swap(&other->messages_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FloPointMultiMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FloPointMultiMessage_descriptor_;
  metadata.reflection = FloPointMultiMessage_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* FloPointMessage_TimeSource_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FloPointMessage_TimeSource_descriptor_;
}
bool FloPointMessage_TimeSource_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const FloPointMessage_TimeSource FloPointMessage::CLOCK0;
const FloPointMessage_TimeSource FloPointMessage::CLOCK1;
const FloPointMessage_TimeSource FloPointMessage::CLOCK2;
const FloPointMessage_TimeSource FloPointMessage::TimeSource_MIN;
const FloPointMessage_TimeSource FloPointMessage::TimeSource_MAX;
const int FloPointMessage::TimeSource_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* FloPointMessage_TempSource_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FloPointMessage_TempSource_descriptor_;
}
bool FloPointMessage_TempSource_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const FloPointMessage_TempSource FloPointMessage::THERM0;
const FloPointMessage_TempSource FloPointMessage::THERM1;
const FloPointMessage_TempSource FloPointMessage::THERM2;
const FloPointMessage_TempSource FloPointMessage::TempSource_MIN;
const FloPointMessage_TempSource FloPointMessage::TempSource_MAX;
const int FloPointMessage::TempSource_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* FloPointMessage_VoltSource_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FloPointMessage_VoltSource_descriptor_;
}
bool FloPointMessage_VoltSource_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const FloPointMessage_VoltSource FloPointMessage::VOLTM0;
const FloPointMessage_VoltSource FloPointMessage::VOLTM1;
const FloPointMessage_VoltSource FloPointMessage::VOLTM2;
const FloPointMessage_VoltSource FloPointMessage::VoltSource_MIN;
const FloPointMessage_VoltSource FloPointMessage::VoltSource_MAX;
const int FloPointMessage::VoltSource_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* FloPointMessage_CountType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FloPointMessage_CountType_descriptor_;
}
bool FloPointMessage_CountType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const FloPointMessage_CountType FloPointMessage::MESSAGECOUNT;
const FloPointMessage_CountType FloPointMessage::UPTIME;
const FloPointMessage_CountType FloPointMessage::BOOTCYCLE;
const FloPointMessage_CountType FloPointMessage::COUNT3;
const FloPointMessage_CountType FloPointMessage::CountType_MIN;
const FloPointMessage_CountType FloPointMessage::CountType_MAX;
const int FloPointMessage::CountType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int FloPointMessage_Waveform::kWheightFieldNumber;
#endif  // !_MSC_VER

FloPointMessage_Waveform::FloPointMessage_Waveform()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flopointpb.FloPointMessage.Waveform)
}

void FloPointMessage_Waveform::InitAsDefaultInstance() {
}

FloPointMessage_Waveform::FloPointMessage_Waveform(const FloPointMessage_Waveform& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:flopointpb.FloPointMessage.Waveform)
}

void FloPointMessage_Waveform::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FloPointMessage_Waveform::~FloPointMessage_Waveform() {
  // @@protoc_insertion_point(destructor:flopointpb.FloPointMessage.Waveform)
  SharedDtor();
}

void FloPointMessage_Waveform::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FloPointMessage_Waveform::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FloPointMessage_Waveform::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FloPointMessage_Waveform_descriptor_;
}

const FloPointMessage_Waveform& FloPointMessage_Waveform::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_flopointpb_2eproto();
  return *default_instance_;
}

FloPointMessage_Waveform* FloPointMessage_Waveform::default_instance_ = NULL;

FloPointMessage_Waveform* FloPointMessage_Waveform::New() const {
  return new FloPointMessage_Waveform;
}

void FloPointMessage_Waveform::Clear() {
  wheight_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FloPointMessage_Waveform::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flopointpb.FloPointMessage.Waveform)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 wheight = 1 [packed = true];
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_wheight())));
        } else if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 10, input, this->mutable_wheight())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flopointpb.FloPointMessage.Waveform)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flopointpb.FloPointMessage.Waveform)
  return false;
#undef DO_
}

void FloPointMessage_Waveform::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flopointpb.FloPointMessage.Waveform)
  // repeated int32 wheight = 1 [packed = true];
  if (this->wheight_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_wheight_cached_byte_size_);
  }
  for (int i = 0; i < this->wheight_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->wheight(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flopointpb.FloPointMessage.Waveform)
}

::google::protobuf::uint8* FloPointMessage_Waveform::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flopointpb.FloPointMessage.Waveform)
  // repeated int32 wheight = 1 [packed = true];
  if (this->wheight_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _wheight_cached_byte_size_, target);
  }
  for (int i = 0; i < this->wheight_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->wheight(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flopointpb.FloPointMessage.Waveform)
  return target;
}

int FloPointMessage_Waveform::ByteSize() const {
  int total_size = 0;

  // repeated int32 wheight = 1 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->wheight_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->wheight(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _wheight_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FloPointMessage_Waveform::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FloPointMessage_Waveform* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FloPointMessage_Waveform*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FloPointMessage_Waveform::MergeFrom(const FloPointMessage_Waveform& from) {
  GOOGLE_CHECK_NE(&from, this);
  wheight_.MergeFrom(from.wheight_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FloPointMessage_Waveform::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FloPointMessage_Waveform::CopyFrom(const FloPointMessage_Waveform& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FloPointMessage_Waveform::IsInitialized() const {

  return true;
}

void FloPointMessage_Waveform::Swap(FloPointMessage_Waveform* other) {
  if (other != this) {
    wheight_.Swap(&other->wheight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FloPointMessage_Waveform::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FloPointMessage_Waveform_descriptor_;
  metadata.reflection = FloPointMessage_Waveform_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int FloPointMessage_Jitter::kJheightFieldNumber;
#endif  // !_MSC_VER

FloPointMessage_Jitter::FloPointMessage_Jitter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flopointpb.FloPointMessage.Jitter)
}

void FloPointMessage_Jitter::InitAsDefaultInstance() {
}

FloPointMessage_Jitter::FloPointMessage_Jitter(const FloPointMessage_Jitter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:flopointpb.FloPointMessage.Jitter)
}

void FloPointMessage_Jitter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FloPointMessage_Jitter::~FloPointMessage_Jitter() {
  // @@protoc_insertion_point(destructor:flopointpb.FloPointMessage.Jitter)
  SharedDtor();
}

void FloPointMessage_Jitter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FloPointMessage_Jitter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FloPointMessage_Jitter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FloPointMessage_Jitter_descriptor_;
}

const FloPointMessage_Jitter& FloPointMessage_Jitter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_flopointpb_2eproto();
  return *default_instance_;
}

FloPointMessage_Jitter* FloPointMessage_Jitter::default_instance_ = NULL;

FloPointMessage_Jitter* FloPointMessage_Jitter::New() const {
  return new FloPointMessage_Jitter;
}

void FloPointMessage_Jitter::Clear() {
  jheight_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FloPointMessage_Jitter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flopointpb.FloPointMessage.Jitter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 jheight = 1 [packed = true];
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_jheight())));
        } else if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 10, input, this->mutable_jheight())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flopointpb.FloPointMessage.Jitter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flopointpb.FloPointMessage.Jitter)
  return false;
#undef DO_
}

void FloPointMessage_Jitter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flopointpb.FloPointMessage.Jitter)
  // repeated int32 jheight = 1 [packed = true];
  if (this->jheight_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_jheight_cached_byte_size_);
  }
  for (int i = 0; i < this->jheight_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->jheight(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flopointpb.FloPointMessage.Jitter)
}

::google::protobuf::uint8* FloPointMessage_Jitter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flopointpb.FloPointMessage.Jitter)
  // repeated int32 jheight = 1 [packed = true];
  if (this->jheight_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _jheight_cached_byte_size_, target);
  }
  for (int i = 0; i < this->jheight_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->jheight(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flopointpb.FloPointMessage.Jitter)
  return target;
}

int FloPointMessage_Jitter::ByteSize() const {
  int total_size = 0;

  // repeated int32 jheight = 1 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->jheight_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->jheight(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _jheight_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FloPointMessage_Jitter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FloPointMessage_Jitter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FloPointMessage_Jitter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FloPointMessage_Jitter::MergeFrom(const FloPointMessage_Jitter& from) {
  GOOGLE_CHECK_NE(&from, this);
  jheight_.MergeFrom(from.jheight_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FloPointMessage_Jitter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FloPointMessage_Jitter::CopyFrom(const FloPointMessage_Jitter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FloPointMessage_Jitter::IsInitialized() const {

  return true;
}

void FloPointMessage_Jitter::Swap(FloPointMessage_Jitter* other) {
  if (other != this) {
    jheight_.Swap(&other->jheight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FloPointMessage_Jitter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FloPointMessage_Jitter_descriptor_;
  metadata.reflection = FloPointMessage_Jitter_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int FloPointMessage_Time::kTimePointFieldNumber;
const int FloPointMessage_Time::kTimeSourceFieldNumber;
#endif  // !_MSC_VER

FloPointMessage_Time::FloPointMessage_Time()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flopointpb.FloPointMessage.Time)
}

void FloPointMessage_Time::InitAsDefaultInstance() {
}

FloPointMessage_Time::FloPointMessage_Time(const FloPointMessage_Time& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:flopointpb.FloPointMessage.Time)
}

void FloPointMessage_Time::SharedCtor() {
  _cached_size_ = 0;
  time_point_ = GOOGLE_LONGLONG(0);
  time_source_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FloPointMessage_Time::~FloPointMessage_Time() {
  // @@protoc_insertion_point(destructor:flopointpb.FloPointMessage.Time)
  SharedDtor();
}

void FloPointMessage_Time::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FloPointMessage_Time::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FloPointMessage_Time::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FloPointMessage_Time_descriptor_;
}

const FloPointMessage_Time& FloPointMessage_Time::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_flopointpb_2eproto();
  return *default_instance_;
}

FloPointMessage_Time* FloPointMessage_Time::default_instance_ = NULL;

FloPointMessage_Time* FloPointMessage_Time::New() const {
  return new FloPointMessage_Time;
}

void FloPointMessage_Time::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FloPointMessage_Time*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(time_point_, time_source_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FloPointMessage_Time::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flopointpb.FloPointMessage.Time)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 time_point = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_point_)));
          set_has_time_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time_source;
        break;
      }

      // required .flopointpb.FloPointMessage.TimeSource time_source = 2;
      case 2: {
        if (tag == 16) {
         parse_time_source:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::flopointpb::FloPointMessage_TimeSource_IsValid(value)) {
            set_time_source(static_cast< ::flopointpb::FloPointMessage_TimeSource >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flopointpb.FloPointMessage.Time)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flopointpb.FloPointMessage.Time)
  return false;
#undef DO_
}

void FloPointMessage_Time::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flopointpb.FloPointMessage.Time)
  // required int64 time_point = 1;
  if (has_time_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->time_point(), output);
  }

  // required .flopointpb.FloPointMessage.TimeSource time_source = 2;
  if (has_time_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->time_source(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flopointpb.FloPointMessage.Time)
}

::google::protobuf::uint8* FloPointMessage_Time::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flopointpb.FloPointMessage.Time)
  // required int64 time_point = 1;
  if (has_time_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->time_point(), target);
  }

  // required .flopointpb.FloPointMessage.TimeSource time_source = 2;
  if (has_time_source()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->time_source(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flopointpb.FloPointMessage.Time)
  return target;
}

int FloPointMessage_Time::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 time_point = 1;
    if (has_time_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time_point());
    }

    // required .flopointpb.FloPointMessage.TimeSource time_source = 2;
    if (has_time_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->time_source());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FloPointMessage_Time::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FloPointMessage_Time* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FloPointMessage_Time*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FloPointMessage_Time::MergeFrom(const FloPointMessage_Time& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time_point()) {
      set_time_point(from.time_point());
    }
    if (from.has_time_source()) {
      set_time_source(from.time_source());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FloPointMessage_Time::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FloPointMessage_Time::CopyFrom(const FloPointMessage_Time& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FloPointMessage_Time::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void FloPointMessage_Time::Swap(FloPointMessage_Time* other) {
  if (other != this) {
    std::swap(time_point_, other->time_point_);
    std::swap(time_source_, other->time_source_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FloPointMessage_Time::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FloPointMessage_Time_descriptor_;
  metadata.reflection = FloPointMessage_Time_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int FloPointMessage_Temp::kTempPointFieldNumber;
const int FloPointMessage_Temp::kTempSourceFieldNumber;
#endif  // !_MSC_VER

FloPointMessage_Temp::FloPointMessage_Temp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flopointpb.FloPointMessage.Temp)
}

void FloPointMessage_Temp::InitAsDefaultInstance() {
}

FloPointMessage_Temp::FloPointMessage_Temp(const FloPointMessage_Temp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:flopointpb.FloPointMessage.Temp)
}

void FloPointMessage_Temp::SharedCtor() {
  _cached_size_ = 0;
  temp_point_ = 0;
  temp_source_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FloPointMessage_Temp::~FloPointMessage_Temp() {
  // @@protoc_insertion_point(destructor:flopointpb.FloPointMessage.Temp)
  SharedDtor();
}

void FloPointMessage_Temp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FloPointMessage_Temp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FloPointMessage_Temp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FloPointMessage_Temp_descriptor_;
}

const FloPointMessage_Temp& FloPointMessage_Temp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_flopointpb_2eproto();
  return *default_instance_;
}

FloPointMessage_Temp* FloPointMessage_Temp::default_instance_ = NULL;

FloPointMessage_Temp* FloPointMessage_Temp::New() const {
  return new FloPointMessage_Temp;
}

void FloPointMessage_Temp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FloPointMessage_Temp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(temp_point_, temp_source_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FloPointMessage_Temp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flopointpb.FloPointMessage.Temp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 temp_point = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &temp_point_)));
          set_has_temp_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_temp_source;
        break;
      }

      // required .flopointpb.FloPointMessage.TempSource temp_source = 2;
      case 2: {
        if (tag == 16) {
         parse_temp_source:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::flopointpb::FloPointMessage_TempSource_IsValid(value)) {
            set_temp_source(static_cast< ::flopointpb::FloPointMessage_TempSource >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flopointpb.FloPointMessage.Temp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flopointpb.FloPointMessage.Temp)
  return false;
#undef DO_
}

void FloPointMessage_Temp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flopointpb.FloPointMessage.Temp)
  // required int32 temp_point = 1;
  if (has_temp_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->temp_point(), output);
  }

  // required .flopointpb.FloPointMessage.TempSource temp_source = 2;
  if (has_temp_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->temp_source(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flopointpb.FloPointMessage.Temp)
}

::google::protobuf::uint8* FloPointMessage_Temp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flopointpb.FloPointMessage.Temp)
  // required int32 temp_point = 1;
  if (has_temp_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->temp_point(), target);
  }

  // required .flopointpb.FloPointMessage.TempSource temp_source = 2;
  if (has_temp_source()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->temp_source(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flopointpb.FloPointMessage.Temp)
  return target;
}

int FloPointMessage_Temp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 temp_point = 1;
    if (has_temp_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->temp_point());
    }

    // required .flopointpb.FloPointMessage.TempSource temp_source = 2;
    if (has_temp_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->temp_source());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FloPointMessage_Temp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FloPointMessage_Temp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FloPointMessage_Temp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FloPointMessage_Temp::MergeFrom(const FloPointMessage_Temp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_temp_point()) {
      set_temp_point(from.temp_point());
    }
    if (from.has_temp_source()) {
      set_temp_source(from.temp_source());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FloPointMessage_Temp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FloPointMessage_Temp::CopyFrom(const FloPointMessage_Temp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FloPointMessage_Temp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void FloPointMessage_Temp::Swap(FloPointMessage_Temp* other) {
  if (other != this) {
    std::swap(temp_point_, other->temp_point_);
    std::swap(temp_source_, other->temp_source_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FloPointMessage_Temp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FloPointMessage_Temp_descriptor_;
  metadata.reflection = FloPointMessage_Temp_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int FloPointMessage_Volt::kVoltPointFieldNumber;
const int FloPointMessage_Volt::kVoltSourceFieldNumber;
#endif  // !_MSC_VER

FloPointMessage_Volt::FloPointMessage_Volt()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flopointpb.FloPointMessage.Volt)
}

void FloPointMessage_Volt::InitAsDefaultInstance() {
}

FloPointMessage_Volt::FloPointMessage_Volt(const FloPointMessage_Volt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:flopointpb.FloPointMessage.Volt)
}

void FloPointMessage_Volt::SharedCtor() {
  _cached_size_ = 0;
  volt_point_ = 0;
  volt_source_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FloPointMessage_Volt::~FloPointMessage_Volt() {
  // @@protoc_insertion_point(destructor:flopointpb.FloPointMessage.Volt)
  SharedDtor();
}

void FloPointMessage_Volt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FloPointMessage_Volt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FloPointMessage_Volt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FloPointMessage_Volt_descriptor_;
}

const FloPointMessage_Volt& FloPointMessage_Volt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_flopointpb_2eproto();
  return *default_instance_;
}

FloPointMessage_Volt* FloPointMessage_Volt::default_instance_ = NULL;

FloPointMessage_Volt* FloPointMessage_Volt::New() const {
  return new FloPointMessage_Volt;
}

void FloPointMessage_Volt::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FloPointMessage_Volt*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(volt_point_, volt_source_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FloPointMessage_Volt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flopointpb.FloPointMessage.Volt)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 volt_point = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volt_point_)));
          set_has_volt_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_volt_source;
        break;
      }

      // required .flopointpb.FloPointMessage.VoltSource volt_source = 2;
      case 2: {
        if (tag == 16) {
         parse_volt_source:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::flopointpb::FloPointMessage_VoltSource_IsValid(value)) {
            set_volt_source(static_cast< ::flopointpb::FloPointMessage_VoltSource >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flopointpb.FloPointMessage.Volt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flopointpb.FloPointMessage.Volt)
  return false;
#undef DO_
}

void FloPointMessage_Volt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flopointpb.FloPointMessage.Volt)
  // required int32 volt_point = 1;
  if (has_volt_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->volt_point(), output);
  }

  // required .flopointpb.FloPointMessage.VoltSource volt_source = 2;
  if (has_volt_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->volt_source(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flopointpb.FloPointMessage.Volt)
}

::google::protobuf::uint8* FloPointMessage_Volt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flopointpb.FloPointMessage.Volt)
  // required int32 volt_point = 1;
  if (has_volt_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->volt_point(), target);
  }

  // required .flopointpb.FloPointMessage.VoltSource volt_source = 2;
  if (has_volt_source()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->volt_source(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flopointpb.FloPointMessage.Volt)
  return target;
}

int FloPointMessage_Volt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 volt_point = 1;
    if (has_volt_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->volt_point());
    }

    // required .flopointpb.FloPointMessage.VoltSource volt_source = 2;
    if (has_volt_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->volt_source());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FloPointMessage_Volt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FloPointMessage_Volt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FloPointMessage_Volt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FloPointMessage_Volt::MergeFrom(const FloPointMessage_Volt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_volt_point()) {
      set_volt_point(from.volt_point());
    }
    if (from.has_volt_source()) {
      set_volt_source(from.volt_source());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FloPointMessage_Volt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FloPointMessage_Volt::CopyFrom(const FloPointMessage_Volt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FloPointMessage_Volt::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void FloPointMessage_Volt::Swap(FloPointMessage_Volt* other) {
  if (other != this) {
    std::swap(volt_point_, other->volt_point_);
    std::swap(volt_source_, other->volt_source_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FloPointMessage_Volt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FloPointMessage_Volt_descriptor_;
  metadata.reflection = FloPointMessage_Volt_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int FloPointMessage_CompileInfo::kCompilerFieldNumber;
const int FloPointMessage_CompileInfo::kDateFieldNumber;
const int FloPointMessage_CompileInfo::kOperatingSystemFieldNumber;
#endif  // !_MSC_VER

FloPointMessage_CompileInfo::FloPointMessage_CompileInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flopointpb.FloPointMessage.CompileInfo)
}

void FloPointMessage_CompileInfo::InitAsDefaultInstance() {
}

FloPointMessage_CompileInfo::FloPointMessage_CompileInfo(const FloPointMessage_CompileInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:flopointpb.FloPointMessage.CompileInfo)
}

void FloPointMessage_CompileInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  compiler_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  operating_system_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FloPointMessage_CompileInfo::~FloPointMessage_CompileInfo() {
  // @@protoc_insertion_point(destructor:flopointpb.FloPointMessage.CompileInfo)
  SharedDtor();
}

void FloPointMessage_CompileInfo::SharedDtor() {
  if (compiler_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete compiler_;
  }
  if (date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete date_;
  }
  if (operating_system_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete operating_system_;
  }
  if (this != default_instance_) {
  }
}

void FloPointMessage_CompileInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FloPointMessage_CompileInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FloPointMessage_CompileInfo_descriptor_;
}

const FloPointMessage_CompileInfo& FloPointMessage_CompileInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_flopointpb_2eproto();
  return *default_instance_;
}

FloPointMessage_CompileInfo* FloPointMessage_CompileInfo::default_instance_ = NULL;

FloPointMessage_CompileInfo* FloPointMessage_CompileInfo::New() const {
  return new FloPointMessage_CompileInfo;
}

void FloPointMessage_CompileInfo::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_compiler()) {
      if (compiler_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        compiler_->clear();
      }
    }
    if (has_date()) {
      if (date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        date_->clear();
      }
    }
    if (has_operating_system()) {
      if (operating_system_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        operating_system_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FloPointMessage_CompileInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flopointpb.FloPointMessage.CompileInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string compiler = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_compiler()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->compiler().data(), this->compiler().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "compiler");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_date;
        break;
      }

      // optional string date = 2;
      case 2: {
        if (tag == 18) {
         parse_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_date()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->date().data(), this->date().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "date");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_operating_system;
        break;
      }

      // optional string operating_system = 3;
      case 3: {
        if (tag == 26) {
         parse_operating_system:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_operating_system()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->operating_system().data(), this->operating_system().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "operating_system");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flopointpb.FloPointMessage.CompileInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flopointpb.FloPointMessage.CompileInfo)
  return false;
#undef DO_
}

void FloPointMessage_CompileInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flopointpb.FloPointMessage.CompileInfo)
  // required string compiler = 1;
  if (has_compiler()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->compiler().data(), this->compiler().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "compiler");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->compiler(), output);
  }

  // optional string date = 2;
  if (has_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->date().data(), this->date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "date");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->date(), output);
  }

  // optional string operating_system = 3;
  if (has_operating_system()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->operating_system().data(), this->operating_system().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "operating_system");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->operating_system(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flopointpb.FloPointMessage.CompileInfo)
}

::google::protobuf::uint8* FloPointMessage_CompileInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flopointpb.FloPointMessage.CompileInfo)
  // required string compiler = 1;
  if (has_compiler()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->compiler().data(), this->compiler().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "compiler");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->compiler(), target);
  }

  // optional string date = 2;
  if (has_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->date().data(), this->date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "date");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->date(), target);
  }

  // optional string operating_system = 3;
  if (has_operating_system()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->operating_system().data(), this->operating_system().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "operating_system");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->operating_system(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flopointpb.FloPointMessage.CompileInfo)
  return target;
}

int FloPointMessage_CompileInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string compiler = 1;
    if (has_compiler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->compiler());
    }

    // optional string date = 2;
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->date());
    }

    // optional string operating_system = 3;
    if (has_operating_system()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->operating_system());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FloPointMessage_CompileInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FloPointMessage_CompileInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FloPointMessage_CompileInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FloPointMessage_CompileInfo::MergeFrom(const FloPointMessage_CompileInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_compiler()) {
      set_compiler(from.compiler());
    }
    if (from.has_date()) {
      set_date(from.date());
    }
    if (from.has_operating_system()) {
      set_operating_system(from.operating_system());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FloPointMessage_CompileInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FloPointMessage_CompileInfo::CopyFrom(const FloPointMessage_CompileInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FloPointMessage_CompileInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FloPointMessage_CompileInfo::Swap(FloPointMessage_CompileInfo* other) {
  if (other != this) {
    std::swap(compiler_, other->compiler_);
    std::swap(date_, other->date_);
    std::swap(operating_system_, other->operating_system_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FloPointMessage_CompileInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FloPointMessage_CompileInfo_descriptor_;
  metadata.reflection = FloPointMessage_CompileInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int FloPointMessage_Count::kCountValueFieldNumber;
const int FloPointMessage_Count::kCountTypeFieldNumber;
#endif  // !_MSC_VER

FloPointMessage_Count::FloPointMessage_Count()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flopointpb.FloPointMessage.Count)
}

void FloPointMessage_Count::InitAsDefaultInstance() {
}

FloPointMessage_Count::FloPointMessage_Count(const FloPointMessage_Count& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:flopointpb.FloPointMessage.Count)
}

void FloPointMessage_Count::SharedCtor() {
  _cached_size_ = 0;
  count_value_ = 0;
  count_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FloPointMessage_Count::~FloPointMessage_Count() {
  // @@protoc_insertion_point(destructor:flopointpb.FloPointMessage.Count)
  SharedDtor();
}

void FloPointMessage_Count::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FloPointMessage_Count::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FloPointMessage_Count::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FloPointMessage_Count_descriptor_;
}

const FloPointMessage_Count& FloPointMessage_Count::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_flopointpb_2eproto();
  return *default_instance_;
}

FloPointMessage_Count* FloPointMessage_Count::default_instance_ = NULL;

FloPointMessage_Count* FloPointMessage_Count::New() const {
  return new FloPointMessage_Count;
}

void FloPointMessage_Count::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FloPointMessage_Count*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(count_value_, count_type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FloPointMessage_Count::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flopointpb.FloPointMessage.Count)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 count_value = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_value_)));
          set_has_count_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count_type;
        break;
      }

      // required .flopointpb.FloPointMessage.CountType count_type = 2;
      case 2: {
        if (tag == 16) {
         parse_count_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::flopointpb::FloPointMessage_CountType_IsValid(value)) {
            set_count_type(static_cast< ::flopointpb::FloPointMessage_CountType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flopointpb.FloPointMessage.Count)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flopointpb.FloPointMessage.Count)
  return false;
#undef DO_
}

void FloPointMessage_Count::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flopointpb.FloPointMessage.Count)
  // required int32 count_value = 1;
  if (has_count_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->count_value(), output);
  }

  // required .flopointpb.FloPointMessage.CountType count_type = 2;
  if (has_count_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->count_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flopointpb.FloPointMessage.Count)
}

::google::protobuf::uint8* FloPointMessage_Count::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flopointpb.FloPointMessage.Count)
  // required int32 count_value = 1;
  if (has_count_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->count_value(), target);
  }

  // required .flopointpb.FloPointMessage.CountType count_type = 2;
  if (has_count_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->count_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flopointpb.FloPointMessage.Count)
  return target;
}

int FloPointMessage_Count::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 count_value = 1;
    if (has_count_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count_value());
    }

    // required .flopointpb.FloPointMessage.CountType count_type = 2;
    if (has_count_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->count_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FloPointMessage_Count::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FloPointMessage_Count* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FloPointMessage_Count*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FloPointMessage_Count::MergeFrom(const FloPointMessage_Count& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count_value()) {
      set_count_value(from.count_value());
    }
    if (from.has_count_type()) {
      set_count_type(from.count_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FloPointMessage_Count::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FloPointMessage_Count::CopyFrom(const FloPointMessage_Count& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FloPointMessage_Count::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void FloPointMessage_Count::Swap(FloPointMessage_Count* other) {
  if (other != this) {
    std::swap(count_value_, other->count_value_);
    std::swap(count_type_, other->count_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FloPointMessage_Count::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FloPointMessage_Count_descriptor_;
  metadata.reflection = FloPointMessage_Count_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int FloPointMessage::kNameFieldNumber;
const int FloPointMessage::kWaveformFieldNumber;
const int FloPointMessage::kJitterFieldNumber;
const int FloPointMessage::kTimeReadingFieldNumber;
const int FloPointMessage::kTempReadingFieldNumber;
const int FloPointMessage::kVoltReadingFieldNumber;
const int FloPointMessage::kCompileInfoFieldNumber;
const int FloPointMessage::kDipswitchesFieldNumber;
const int FloPointMessage::kCountFieldNumber;
#endif  // !_MSC_VER

FloPointMessage::FloPointMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flopointpb.FloPointMessage)
}

void FloPointMessage::InitAsDefaultInstance() {
  waveform_ = const_cast< ::flopointpb::FloPointMessage_Waveform*>(&::flopointpb::FloPointMessage_Waveform::default_instance());
  jitter_ = const_cast< ::flopointpb::FloPointMessage_Jitter*>(&::flopointpb::FloPointMessage_Jitter::default_instance());
  compile_info_ = const_cast< ::flopointpb::FloPointMessage_CompileInfo*>(&::flopointpb::FloPointMessage_CompileInfo::default_instance());
}

FloPointMessage::FloPointMessage(const FloPointMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:flopointpb.FloPointMessage)
}

void FloPointMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  waveform_ = NULL;
  jitter_ = NULL;
  compile_info_ = NULL;
  dipswitches_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FloPointMessage::~FloPointMessage() {
  // @@protoc_insertion_point(destructor:flopointpb.FloPointMessage)
  SharedDtor();
}

void FloPointMessage::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
    delete waveform_;
    delete jitter_;
    delete compile_info_;
  }
}

void FloPointMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FloPointMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FloPointMessage_descriptor_;
}

const FloPointMessage& FloPointMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_flopointpb_2eproto();
  return *default_instance_;
}

FloPointMessage* FloPointMessage::default_instance_ = NULL;

FloPointMessage* FloPointMessage::New() const {
  return new FloPointMessage;
}

void FloPointMessage::Clear() {
  if (_has_bits_[0 / 32] & 199) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_waveform()) {
      if (waveform_ != NULL) waveform_->::flopointpb::FloPointMessage_Waveform::Clear();
    }
    if (has_jitter()) {
      if (jitter_ != NULL) jitter_->::flopointpb::FloPointMessage_Jitter::Clear();
    }
    if (has_compile_info()) {
      if (compile_info_ != NULL) compile_info_->::flopointpb::FloPointMessage_CompileInfo::Clear();
    }
    dipswitches_ = 0;
  }
  time_reading_.Clear();
  temp_reading_.Clear();
  volt_reading_.Clear();
  count_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FloPointMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flopointpb.FloPointMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_waveform;
        break;
      }

      // required .flopointpb.FloPointMessage.Waveform waveform = 2;
      case 2: {
        if (tag == 18) {
         parse_waveform:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_waveform()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_jitter;
        break;
      }

      // optional .flopointpb.FloPointMessage.Jitter jitter = 3;
      case 3: {
        if (tag == 26) {
         parse_jitter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_jitter()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_time_reading;
        break;
      }

      // repeated .flopointpb.FloPointMessage.Time time_reading = 4;
      case 4: {
        if (tag == 34) {
         parse_time_reading:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_time_reading()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_time_reading;
        if (input->ExpectTag(42)) goto parse_temp_reading;
        break;
      }

      // repeated .flopointpb.FloPointMessage.Temp temp_reading = 5;
      case 5: {
        if (tag == 42) {
         parse_temp_reading:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_temp_reading()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_temp_reading;
        if (input->ExpectTag(50)) goto parse_volt_reading;
        break;
      }

      // repeated .flopointpb.FloPointMessage.Volt volt_reading = 6;
      case 6: {
        if (tag == 50) {
         parse_volt_reading:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_volt_reading()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_volt_reading;
        if (input->ExpectTag(58)) goto parse_compile_info;
        break;
      }

      // optional .flopointpb.FloPointMessage.CompileInfo compile_info = 7;
      case 7: {
        if (tag == 58) {
         parse_compile_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_compile_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_dipswitches;
        break;
      }

      // optional int32 dipswitches = 8;
      case 8: {
        if (tag == 64) {
         parse_dipswitches:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dipswitches_)));
          set_has_dipswitches();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_count;
        break;
      }

      // repeated .flopointpb.FloPointMessage.Count count = 9;
      case 9: {
        if (tag == 74) {
         parse_count:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_count()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_count;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flopointpb.FloPointMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flopointpb.FloPointMessage)
  return false;
#undef DO_
}

void FloPointMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flopointpb.FloPointMessage)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required .flopointpb.FloPointMessage.Waveform waveform = 2;
  if (has_waveform()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->waveform(), output);
  }

  // optional .flopointpb.FloPointMessage.Jitter jitter = 3;
  if (has_jitter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->jitter(), output);
  }

  // repeated .flopointpb.FloPointMessage.Time time_reading = 4;
  for (int i = 0; i < this->time_reading_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->time_reading(i), output);
  }

  // repeated .flopointpb.FloPointMessage.Temp temp_reading = 5;
  for (int i = 0; i < this->temp_reading_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->temp_reading(i), output);
  }

  // repeated .flopointpb.FloPointMessage.Volt volt_reading = 6;
  for (int i = 0; i < this->volt_reading_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->volt_reading(i), output);
  }

  // optional .flopointpb.FloPointMessage.CompileInfo compile_info = 7;
  if (has_compile_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->compile_info(), output);
  }

  // optional int32 dipswitches = 8;
  if (has_dipswitches()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->dipswitches(), output);
  }

  // repeated .flopointpb.FloPointMessage.Count count = 9;
  for (int i = 0; i < this->count_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->count(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flopointpb.FloPointMessage)
}

::google::protobuf::uint8* FloPointMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flopointpb.FloPointMessage)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required .flopointpb.FloPointMessage.Waveform waveform = 2;
  if (has_waveform()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->waveform(), target);
  }

  // optional .flopointpb.FloPointMessage.Jitter jitter = 3;
  if (has_jitter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->jitter(), target);
  }

  // repeated .flopointpb.FloPointMessage.Time time_reading = 4;
  for (int i = 0; i < this->time_reading_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->time_reading(i), target);
  }

  // repeated .flopointpb.FloPointMessage.Temp temp_reading = 5;
  for (int i = 0; i < this->temp_reading_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->temp_reading(i), target);
  }

  // repeated .flopointpb.FloPointMessage.Volt volt_reading = 6;
  for (int i = 0; i < this->volt_reading_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->volt_reading(i), target);
  }

  // optional .flopointpb.FloPointMessage.CompileInfo compile_info = 7;
  if (has_compile_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->compile_info(), target);
  }

  // optional int32 dipswitches = 8;
  if (has_dipswitches()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->dipswitches(), target);
  }

  // repeated .flopointpb.FloPointMessage.Count count = 9;
  for (int i = 0; i < this->count_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->count(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flopointpb.FloPointMessage)
  return target;
}

int FloPointMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required .flopointpb.FloPointMessage.Waveform waveform = 2;
    if (has_waveform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->waveform());
    }

    // optional .flopointpb.FloPointMessage.Jitter jitter = 3;
    if (has_jitter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->jitter());
    }

    // optional .flopointpb.FloPointMessage.CompileInfo compile_info = 7;
    if (has_compile_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->compile_info());
    }

    // optional int32 dipswitches = 8;
    if (has_dipswitches()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dipswitches());
    }

  }
  // repeated .flopointpb.FloPointMessage.Time time_reading = 4;
  total_size += 1 * this->time_reading_size();
  for (int i = 0; i < this->time_reading_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->time_reading(i));
  }

  // repeated .flopointpb.FloPointMessage.Temp temp_reading = 5;
  total_size += 1 * this->temp_reading_size();
  for (int i = 0; i < this->temp_reading_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->temp_reading(i));
  }

  // repeated .flopointpb.FloPointMessage.Volt volt_reading = 6;
  total_size += 1 * this->volt_reading_size();
  for (int i = 0; i < this->volt_reading_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->volt_reading(i));
  }

  // repeated .flopointpb.FloPointMessage.Count count = 9;
  total_size += 1 * this->count_size();
  for (int i = 0; i < this->count_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->count(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FloPointMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FloPointMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FloPointMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FloPointMessage::MergeFrom(const FloPointMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  time_reading_.MergeFrom(from.time_reading_);
  temp_reading_.MergeFrom(from.temp_reading_);
  volt_reading_.MergeFrom(from.volt_reading_);
  count_.MergeFrom(from.count_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_waveform()) {
      mutable_waveform()->::flopointpb::FloPointMessage_Waveform::MergeFrom(from.waveform());
    }
    if (from.has_jitter()) {
      mutable_jitter()->::flopointpb::FloPointMessage_Jitter::MergeFrom(from.jitter());
    }
    if (from.has_compile_info()) {
      mutable_compile_info()->::flopointpb::FloPointMessage_CompileInfo::MergeFrom(from.compile_info());
    }
    if (from.has_dipswitches()) {
      set_dipswitches(from.dipswitches());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FloPointMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FloPointMessage::CopyFrom(const FloPointMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FloPointMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->time_reading())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->temp_reading())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->volt_reading())) return false;
  if (has_compile_info()) {
    if (!this->compile_info().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->count())) return false;
  return true;
}

void FloPointMessage::Swap(FloPointMessage* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(waveform_, other->waveform_);
    std::swap(jitter_, other->jitter_);
    time_reading_.Swap(&other->time_reading_);
    temp_reading_.Swap(&other->temp_reading_);
    volt_reading_.Swap(&other->volt_reading_);
    std::swap(compile_info_, other->compile_info_);
    std::swap(dipswitches_, other->dipswitches_);
    count_.Swap(&other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FloPointMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FloPointMessage_descriptor_;
  metadata.reflection = FloPointMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace flopointpb

// @@protoc_insertion_point(global_scope)
